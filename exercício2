#
# Suponha que tenhamos o dataframe df abaixo
#
# x     y
# A     5
# A     3
# B     8
# B    12
#
# Complete o código que obtém o seguinte resultado:
#
#        z
#        7
#

install.packages("tidyverse")
library(tidyverse)
library(dplyr)

x <- c("A","A","B","B")
y <- c(5,3,8,12)
df <- data.frame(x,y)

df %>%
summarise(z = mean(y))

#######################################################################

# Suponha que tenhamos o dataframe df abaixo
#
# y1    y2    y3    y4
# 8.04  9.14  7.46  6.58
# 6.95  8.14  6.77  5.76
# 7.58  8.74  12.74 7.71
#
# Complete o código que obtém o seguinte resultado:
#
# y1    
# 8.04  
# 6.95  
# 7.58  

y1 <- c(8.04, 6.95, 7.58)
y2 <- c(9.14, 8.14, 8.74)
y3 <- c(7.46, 6.77, 12.74)
y4 <- c(6.58, 5.76, 7.71)

df <- data.frame(y1, y2, y3, y4)
glimpse(df)

df %>%
select(y1)
  
#######################################################################

# Suponha que tenhamos o dataframe df abaixo
#
#    x  y
#   1  10
#   6  8
#   2  3
#   4  5
#
# Complete o código que obtém o seguinte resultado, fazendo uma operação
# entre x e y
#
#    x  y   z
#   1  10  -9
#   6  8   -2
#   2  3   -1
#   4  5   -1
#

x <- c(1,6,2,4)
y <- c(10,8,3,5)

df <- data.frame(x,y)

df %>%
mutate(z = x - y)
  
########################################################################

#
# Suponha que tenhamos o dataframe df abaixo
#
#    city sales
# Boston   220
# Boston   125
#    NYC   150
#    NYC   250
#
# Complete o código que obtém o seguinte resultado:
#
# city   avg_sales
# Boston      172
# NYC         200 

city <- c("Boston", "Boston", "NYC", "NYC")
sales <- c(220,125,150,250)
df <- data.frame(city,sales)

df %>% 
   group_by(city)%>%
  summarise(avg_sales = mean(sales))
  
########################################################################

# Suponha que tenhamos o dataframe df abaixo
#
#week   min   max
#  3    55    60
#  2    52    56
#  1    60    63
#  4    65    67
#
# Complete o código que obtém o seguinte resultado:
#
#week   min   max
#  1    60    63
#  2    52    56
#  3    55    60
#  4    65    67

week <- c(3,2,1,4)
min <- c(55,52,60,65)
max <- c(60,56,63,67)
df <- data.frame(week, min, max)
df %>%
  arrange(week)

########################################################################

# Suponha que tenhamos o dataframe df abaixo
#
# x_b_1  x_b_2  y_c_1  y_c_2
#  A      2      W1     25
#  A      4      W2     21
#  B      6      W1     26
#  B      8      W2     30
#
# Complete o código que obtém o seguinte resultado:
#
# y_c_1  y_c_2
#  W1     25
#  W2     21
#  W1     26
#  W2     30

x_b_1 <- c("A","A","B","B")
x_b_2 <- c(2,4,6,8)
y_c_1 <- c("w1","w2","w1","w2")
y_c_2 <- c(25,21,26,30)

df <- data.frame(x_b_1, x_b_2, y_c_1, y_c_2)

df %>%
  select(y_c_1, y_c_2)
  
#########################################################################

# Suponha que tenhamos o dataframe df abaixo
#
# Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
# 78           6.7         3.0          5.0         1.7 versicolor
# 121          6.9         3.2          5.7         2.3  virginica
# 11           5.4         3.7          1.5         0.2     setosa
# 92           6.1         3.0          4.6         1.4 versicolor
# 146          6.7         3.0          5.2         2.3  virginica
# 62           5.9         3.0          4.2         1.5 versicolor
# 50           5.0         3.3          1.4         0.2     setosa
# 17           5.4         3.9          1.3         0.4     setosa
# 69           6.2         2.2          4.5         1.5 versicolor
# 143          5.8         2.7          5.1         1.9  virginica
#
# Complete o código que obtém o seguinte resultado:
#
#Species      Sepal.Area
#versicolor      20.10
#virginica       22.08
#setosa          19.98
#versicolor      18.30
#virginica       20.10
#versicolor      17.70
#setosa          16.50
#setosa          21.06
#versicolor      13.64
#virginica      15.66

head(iris)

Sepal.Length <- c(6.7,6.9,5.4,6.1,6.7,5.9,5.0,5.4,6.2,5.8)
Sepal.Width <- c(3.0,3.2,3.7,3.0,3.0,3.0,3.3,3.9,2.2,2.7)
Petal.Width <- c(1.7,2.3,0.2,1.4,2.3,1.5,0.2,0.4,1.5,1.9)
Petal.Length <- c(5.0,5.7,1.5,4.6,5.2,4.2,1.4,1.3,4.5,5.1)
Species <- c("versicolor", "virginica", "setosa", "versicolor", "virginica",
             "versicolor", "setosa", "setosa", "versicolor", "virginica")

df <- data.frame(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species)

df %>%
  transmute(Species, Sepal.Area = (Sepal.Length * Sepal.Width))

########################################################################

# Suponha que tenhamos o dataframe df abaixo
#
#name         start       end         party     
#Eisenhower   1953-01-20  1961-01-20  Republican
#Kennedy      1961-01-20  1963-11-22  Democratic
#Johnson      1963-11-22  1969-01-20  Democratic
#Nixon        1969-01-20  1974-08-09  Republican
#Ford         1974-08-09  1977-01-20  Republican
#Carter       1977-01-20  1981-01-20  Democratic
#Reagan       1981-01-20  1989-01-20  Republican
#Bush         1989-01-20  1993-01-20  Republican
#Clinton      1993-01-20  2001-01-20  Democratic
#Bush         2001-01-20  2009-01-20  Republican
#Obama        2009-01-20  2017-01-20  Democratic
#
#Crie um código abaixo para que se altere a variável party
#deixando apenas a primeira letra dos partidos

df <- data.frame(name = c("Eisenhower","Kennedy","Johnson","Nixon","Ford","Carter","Reagan","Bush", 
                "Clinton", "Bush", "Obama"),
       start = c("1953-01-20", "1961-01-20", "1963-11-22", "1969-01-20","1974-08-09",
                 "1977-01-20","1981-01-20","1989-01-20","1993-01-20","2001-01-20",
                 "2009-01-20"),
       end = c("1961-01-20", "1963-11-22", "1969-01-20","1974-08-09",
               "1977-01-20","1981-01-20","1989-01-20","1993-01-20","2001-01-20",
               "2009-01-20","2017-01-20"),
       party = c("Republican", "Democratic","Democratic","Republican","Republican",
                 "Democratic","Republican","Republican","Democratic","Republican",
                 "Democratic"))

df %>%
 mutate(party = recode (party, 
                        Democratic = "D",
                        Republican = "R"))

###############################################################################

# No pacote poliscidata existe um banco de dados chamado nes, com informações 
# do American National Election Survey. Para os exerícicios a seguir, instale 
# o pacote poliscidata e tidyverse, carregue-os e crie um objeto chamado
# df com os dados do nes. 

install.packages("poliscidata")
library(poliscidata)

# Faça uma primeira exploração do banco de dados com todos os comandos
# passados até aqui que possuem esse ob

head(nes)
tail(nes)
str(nes)
summary(nes)
glimpse(nes)

# Quantos respondentes possui na pesquisa?
5.916

# Caso queiram ter mais informações sobre as variáveis do nes, basta rodar
# o código `?nes`, que no canto inferior direito aparecerá uma descrição.
# Como temos muitas variáveis, deixe apenas as colunas
# ftgr_cons, dem_raceeth, voted2012, science_use, preknow3, obama_vote
# income5, gender.

?nes

banco <- nes %>%
  select(ftgr_cons, dem_raceeth, voted2012, science_use, preknow3, obama_vote,
         income5, gender)


# Se quisermos ter informações apenas de pessoas que votaram na
# eleição de 2012, podemos usar a variável voted2012. Tire do banco
# os respondentes que não votaram

banco_votantes <- banco %>%
  filter(voted2012 == "Voted")

# Quantos respondentes sobraram?
4404

# Crie uma variável chamada white que indica se o respondente é branco
# ou não a partir da variável dem_raceeth, crie a variável ideology a
# partir da variável ftgr_cons (0-33 como liberal, 34 a 66 como centro,
# e 67 a 100 como conservador), ao mesmo tempo em que muda
# a variável obama_vote para trocar o 1 por "Sim" e 0 por "não"

banco_novo <- banco %>%
  mutate(ftgr_cons, science_use, voted2012, dem_raceeth, 
            preknow3, income5, gender,
            obama_vote = recode(obama_vote, "1" = "sim", "0" = "não"), 
            white = recode(dem_raceeth, "1. White non-Hispanic" = T),
            ideology = case_when(ftgr_cons <= 33 ~ "liberal",
                              ftgr_cons >= 34 & ftgr_cons <= 66 ~ "centro", 
                              ftgr_cons >= 67 ~ "conservador"))


# Demonstre como observar a quantidade de pessoas em cada uma das
# categorias de science_use
banco %>% count(science_use)


# Demonstre como observar a média de conservadorismo (variável 
# ftgr_cons) para cada categoria de science_use

banco %>%
  group_by(science_use) %>%
  summarise(mean(ftgr_cons, na.rm = TRUE))
  
###############################################################################

# Responder as questões teóricas da aula abaixo


